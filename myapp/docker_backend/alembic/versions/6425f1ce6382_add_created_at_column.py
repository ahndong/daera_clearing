"""Add created_at column

Revision ID: 6425f1ce6382
Revises: 
Create Date: 2023-10-23 15:08:06.539497

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6425f1ce6382"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 외래 키 제약 조건 삭제
    op.drop_constraint(
        "alltransaction_playerid_fkey", "alltransaction", type_="foreignkey"
    )
    op.drop_constraint(
        "resultofplayer_playerid_fkey", "resultofplayer", type_="foreignkey"
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("player")
    op.drop_table("resultofplayer")
    op.drop_table("alltransaction")
    op.drop_table("gameinfo")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "gameinfo",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("netplayer", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("netbuyin", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("netgamefee", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("netbbozzi", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "start",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "finish", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("playtimemin", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="gameinfo_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "alltransaction",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("playerid", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "transactiontype",
            postgresql.ENUM(
                "buyin", "endchip", "setbbozzi", "getbbozzi", "gamefee", name="txtype"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("amount", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "time",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["playerid"], ["player.id"], name="alltransaction_playerid_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="alltransaction_pkey"),
    )
    op.create_table(
        "resultofplayer",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("gameinfoid", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("playerid", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("buyin", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("chipout", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("actualresult", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("rankongame", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["gameinfoid"], ["gameinfo.id"], name="resultofplayer_gameinfoid_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["playerid"], ["player.id"], name="resultofplayer_playerid_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="resultofplayer_pkey"),
    )
    op.create_table(
        "player",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("nickname", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("totalbuyin", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("totalout", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("netscore", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("noofgames", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("getbbozziratio", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("setbbozziratio", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="player_pkey"),
    )
    # ### end Alembic commands ###
